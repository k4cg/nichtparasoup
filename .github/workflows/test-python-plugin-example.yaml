# GitHubActions for testing
# read the docs: https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow

name: PythonPluginExample Test

on:
  push:
    branches: [ 'master', '3.0-dev' ]
    paths:
      - '.github/workflows/test-python-plugin-example.yaml'
      - '.github/codeql/python-plugin-example.yaml'
      - 'python-plugin-example/**'
      - '!python-plugin-example/docs/**'
      - '!python-plugin-example/**.md'
      - '!python-plugin-example/**.rst'
      - '!python-plugin-example/INSTALL'
      - '!python-plugin-example/LICENSE'
  pull_request:
    branches: [ 'master', '3.0-dev' ]
    paths:
      - '.github/workflows/test-python-plugin-example.yaml'
      - '.github/codeql/python-plugin-example.yaml'
      - 'python-plugin-example/**'
      - '!python-plugin-example/docs/**'
      - '!python-plugin-example/**.md'
      - '!python-plugin-example/**.rst'
      - '!python-plugin-example/INSTALL'
      - '!python-plugin-example/LICENSE'

defaults:
  run:
    working-directory: python-plugin-example

env:
  project-directory: python-plugin-example
  reports-directory: reports
  reports-artifact: reports
  coverage-artifact: coverage
  latest-python-version: '3.9'

jobs:
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      coverage-artifact-dir: _coverage
    strategy:
      fail-fast: false
      matrix:
        include:
          # check the style
          - name: 'Style'
            os: ubuntu-latest
            python: '3.9' # should be ${{ env.latest-python-version }}
            toxenv: tests_start, style
            no-unit-test: true
          # check latest Python for all OS
          - name: Linux
            os: 'ubuntu-latest'
            python: '3.9'  # should be ${{ env.latest-python-version }}
            toxenv: tests_start, py39
          - name: Windows
            os: windows-latest
            python: '3.9'  # should be ${{ env.latest-python-version }}
            toxenv: tests_start, py39
          - name: 'MacOs'
            os: macos-latest
            python: '3.9'  # should be ${{ env.latest-python-version }}
            toxenv: tests_start, py39
          # check older Python
          - name: '3.8'
            os: ubuntu-latest
            python: '3.8'
            toxenv: tests_start, py38
          - name: '3.7'
            os: ubuntu-latest
            python: '3.7'
            toxenv: tests_start, py37
          - name: '3.6'
            os: ubuntu-latest
            python: '3.6'
            toxenv: tests_start, py36
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python_version }}
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Get pip cache dir
        id: pip-cache
        # as shown here: https://github.com/actions/cache/blob/master/examples.md#using-pip-to-get-cache-location
        run: echo "::set-output name=dir::$(python -m pip cache dir)"
      - name: Setup pip cache dir
        continue-on-error: true
        # see https://github.com/actions/cache
        uses: actions/cache@v2.1.4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles(format('{0}/requirements/*.txt', env.project-directory)) }}
          restore-keys: pip-${{ runner.os }}-${{ matrix.python }}-
      - name: Install dependencies
        run: |
          python -m pip install -U wheel setuptools pip
          python -m pip install tox -c requirements/tox.txt
      - name: Test ${{ env.project-directory }}
        id: tests
        run:
          python -m tox -r -s false --
          --junit-xml=${{ env.reports-directory }}/pytests/${{ runner.os }}-${{ matrix.python }}.xml
          -o junit_suite_name=${{ runner.os }}-${{ matrix.python }}
        env:
          TOXENV: ${{ matrix.toxenv }}
          TOX_PARALLEL_NO_SPINNER: 1
      # has some issues with multiple parallel runs -- reports are sent to wrong run some times
      # - name: Publish pytest results
      #  if: ${{ ! cancelled() && ! matrix.no-unit-test }}
      #  # see https://github.com/mikepenz/action-junit-report
      #  uses: mikepenz/action-junit-report@v1
      #  with:
      #    check_name: Pytests Report ${{ matrix.name }} PythonPluginExample
      #    report_paths: ${{ env.project-directory }}/${{ env.reports-directory }}/pytests/${{ runner.os }}-${{ matrix.python }}.xml
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Artifact reports
        if: ${{ ! cancelled() && ! matrix.no-unit-test }}
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.reports-artifact }}
          path: ${{ env.project-directory }}/${{ env.reports-directory }}/
          if-no-files-found: error
      - name: Rename coverage for artifact
        if: ${{ ! cancelled() && ! matrix.no-unit-test }}
        run: |
          mkdir ${{ env.coverage-artifact-dir }}
          mv .coverage ${{ env.coverage-artifact-dir }}/${{ runner.os }}-${{ matrix.python }}.coverage
      - name: Artifact coverage
        if: ${{ ! cancelled() && ! matrix.no-unit-test }}
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.coverage-artifact }}
          path: ${{ env.project-directory }}/${{ env.coverage-artifact-dir }}/
          if-no-files-found: error
      - name: Tidy pip cache dir
        if: ${{ always() }}
        run: python -m pip cache remove 'nichtparasoup*' || true
  test-reporting_merge:
    name: Merge test reports
    needs: [ 'test' ]
    # jus wait until 'test' finished, but run regardless of the outcome
    if: ${{ ! cancelled() }}
    runs-on: ubuntu-latest
    env:
      coverage-artifact-dir: _coverage
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Fetch reports
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.reports-artifact }}
          path: ${{ env.project-directory }}/${{ env.reports-directory }}
      - name: Fetch coverage
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.coverage-artifact }}
          path: ${{ env.project-directory }}/${{ env.coverage-artifact-dir }}
      - name: Setup Python
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.latest-python-version }}
      - name: Get pip cache dir
        id: pip-cache
        # as shown here: https://github.com/actions/cache/blob/master/examples.md#using-pip-to-get-cache-location
        run: echo "::set-output name=dir::$(python -m pip cache dir)"
      - name: Setup pip cache dir
        continue-on-error: true
        # see https://github.com/actions/cache
        uses: actions/cache@v2.1.4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ env.latest-python-version }}-${{ hashFiles(format('{0}/requirements/*.txt', env.project-directory)) }}
          restore-keys: pip-${{ runner.os }}-${{ env.latest-python-version }}-
      - name: Install dependencies
        run: |
          python -m pip install -U wheel setuptools pip
          python -m pip install coverage tox -c requirements/tests.txt -c requirements/tox.txt
      - name: Merge pytest-reports
        run: python -m tox -r -e pytests_merge
      - name: Merge pytest-coverage
        run: |
          python -m coverage combine ${{ env.coverage-artifact-dir }}/*
          python -m tox -r -e coverage_report
      - name: Artifact combined reports
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.reports-artifact }}
          path: ${{ env.project-directory }}/${{ env.reports-directory }}/
          if-no-files-found: error
  sonarcloud:
    name: SonarScanner
    # have forks backed-up: Anyone without write access to a repository cannot read and use secrets
    if: ${{ ! cancelled() && github.repository_owner == 'k4cg' }}
    needs: [ 'test', 'test-reporting_merge' ]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: Fetch reports
        continue-on-error: true
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.reports-artifact }}
          path: ${{ env.project-directory }}/${{ env.reports-directory }}
      - name: SonarCloud Scan
        # see https://github.com/SonarSource/sonarcloud-github-action
        uses: sonarsource/sonarcloud-github-action@v1.5
        with:
          projectBaseDir: ${{ env.project-directory }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  codeql:
    # see https://github.com/github/codeql-action
    name: CodeQL
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2
      - run: git checkout HEAD^2
        # If this run was triggered by a pull request event, then checkout
        # the head of the pull request instead of the merge commit.
        if: ${{ github.event_name == 'pull_request' }}
      - name: Initialize CodeQL
        # see https://github.com/github/codeql-action
        uses: github/codeql-action/init@v1
        with:
          languages: python
          config-file: .github/codeql/${{ env.project-directory }}.yaml
      - name: Perform CodeQL Analysis
        # see https://github.com/github/codeql-action
        uses: github/codeql-action/analyze@v1
