# GitHubActions for testing
# read the docs: https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow

name: Test PythonPackage

on:
  push:
    tags:
      # run again on release tags to have tools mark them
      - '*.*.*'
    branches:
      - 'master'
      - '3.0-dev'
      - 'sonar/xunit_draft1'
    paths:
      - '.github/workflows/python-package-tests.yaml'
      - 'python-package/**'
      - '!python-package/docs/**'
      - '!python-package/images/**'
      - '!python-package/**.md'
      - '!python-package/**.rst'
      - '!python-package/AUTHORS'
      - '!python-package/CHANGELOG'
      - '!python-package/INSTALL'
      - '!python-package/LICENSE'
  pull_request:
    branches:
      - 'master'
      - '3.0-dev'
    paths:
      - '.github/workflows/python-package-tests.yaml'
      - 'python-package/**'
      - '!python-package/docs/**'
      - '!python-package/images/**'
      - '!python-package/**.md'
      - '!python-package/**.rst'
      - '!python-package/AUTHORS'
      - '!python-package/CHANGELOG'
      - '!python-package/INSTALL'
      - '!python-package/LICENSE'
  schedule:
    # schedule weekly tests, since install dependencies are not intended to be pinned
    # this means: at 23:42 on Fridays
    - cron: '42 23 * * 5'

defaults:
  run:
    working-directory: python-package

jobs:
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # check the style
          - name: 'Style'
            os: ubuntu-latest
            python: '3.8'
            toxenv: style
            no-unit-test: true
          # check latest Python for all OS
          - name: Linux
            os: 'ubuntu-latest'
            python: '3.8'
            toxenv: tests_start, py38, coverage_report
            has-coverage: true
          - name: Windows
            os: windows-latest
            python: '3.8'
            toxenv: py38
          - name: 'MacOs'
            os: macos-latest
            python: '3.8'
            toxenv: py38
          # check older Python
          - name: '3.7'
            os: ubuntu-latest
            python: '3.7'
            toxenv: py37
          - name: '3.6'
            os: ubuntu-latest
            python: '3.6'
            toxenv: py36
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python_version }}
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Get pip cache dir
        id: pip-cache
        # as shown here: https://github.com/actions/cache/blob/master/examples.md#using-pip-to-get-cache-location
        run: echo "::set-output name=dir::$(python -m pip cache dir)"
      - name: Setup pip cache dir
        # see https://github.com/actions/cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('python-package/requirements/*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python }}-
      - name: Install dependencies
        run: |
          python -m pip install wheel setuptools pip
          python -m pip install -r requirements/tox.txt
      - name: Test python-package
        run: python -m tox -r -s false
        env:
          TOXENV: ${{ matrix.toxenv }}
          TOX_PARALLEL_NO_SPINNER: 1
      - name: Artifact pytest-report
        continue-on-error: true
        if: ${{ always && ! matrix.no-unit-test }}
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: pytest-report
          path: python-package/pytests/
          if-no-files-found: error
      - name: Artifact coverage
        continue-on-error: true
        if: ${{ always() && matrix.has-coverage }}
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: python-package/coverage.xml
          if-no-files-found: error
      - name: Clean pip cache dir
        if: ${{ always() && steps.pip-cache.outcome == 'success' }}
        run: python -m pip cache remove 'nichtparasoup*' || true

  codecov:
    name: CodeCov
    # have forks backed-up: Anyone without write access to a repository cannot read and use secrets
    if: ${{ github.repository_owner == 'k4cg' }}
    needs: ['test']
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Fetch coverage
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage
          path: python-package
      - name: Upload coverage to CodeCov
        # see https://github.com/codecov/codecov-action
        uses: codecov/codecov-action@v1.0.12
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: python-package/coverage.xml
          flags: python-package
          name: python-package

  sonarcloud:
    name: SonarScanner
    # have forks backed-up: Anyone without write access to a repository cannot read and use secrets
    if: ${{ github.repository_owner == 'k4cg' }}
    needs: ['test']
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: Fetch pytest-report
        continue-on-error: true
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: pytest-report
          path: python-package/pytests
      - name: Fetch coverage
        continue-on-error: true
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage
          path: python-package
      - name: SonarCloud Scan
        # see https://github.com/SonarSource/sonarcloud-github-action
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: python-package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codeql:
    # see https://github.com/github/codeql-action
    name: CodeQL
    # disabled since it took to long
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2
      - run: git checkout HEAD^2
        # If this run was triggered by a pull request event, then checkout
        # the head of the pull request instead of the merge commit.
        if: ${{ github.event_name == 'pull_request' }}
      - name: Initialize CodeQL
        # see https://github.com/github/codeql-action
        uses: github/codeql-action/init@v1
        with:
          languages: python
          config-file: ./.github/codeql/python-package.yaml
      - name: Perform CodeQL Analysis
        # see https://github.com/github/codeql-action
        uses: github/codeql-action/analyze@v1
